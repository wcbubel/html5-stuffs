// Generated by CoffeeScript 1.6.2
(function() {
  var Main, log, main,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  log = console.log;

  Main = (function() {
    function Main() {
      this.onKeyLink = __bind(this.onKeyLink, this);
      this.onDelete = __bind(this.onDelete, this);
      this.onSave = __bind(this.onSave, this);
      this.onNew = __bind(this.onNew, this);      $("button#new_value").bind("click", this.onNew);
      $("button#save_value").bind("click", this.onSave);
      $("button#del_value").bind("click", this.onDelete);
      this.refreshKeys();
      this.updateKeyValueDisplay(null);
    }

    Main.prototype.updateKeyValueDisplay = function(key) {
      var e, value;

      value = "";
      if (key !== null) {
        try {
          value = window.localStorage[key];
        } catch (_error) {
          e = _error;
          log(e);
        }
      } else {
        key = "";
      }
      $("input#key_name").val(key);
      return $("textarea#value_display").val(value);
    };

    Main.prototype.refreshKeys = function() {
      var $a, $li, $list, $tablecell, key, _results;

      $tablecell = $("td#keys_list");
      $tablecell.html("<ul></ul>");
      $list = $tablecell.find("ul");
      _results = [];
      for (key in window.localStorage) {
        $a = $("<a id='localkey_" + key + "' href='#'>" + key + "</a>");
        $a.bind("click", this.onKeyLink);
        $li = $("<li>");
        $li.append($a);
        _results.push($list.append($li));
      }
      return _results;
    };

    Main.prototype.onNew = function(event) {
      return this.updateKeyValueDisplay(null);
    };

    Main.prototype.onSave = function(event) {
      var key, value;

      key = $("input#key_name").val();
      value = $("textarea#value_display").val();
      window.localStorage[key] = value;
      return this.refreshKeys();
    };

    Main.prototype.onDelete = function(event) {
      var key;

      key = $("input#key_name").val();
      if (key in window.localStorage) {
        delete window.localStorage[key];
      }
      this.updateKeyValueDisplay(null);
      return this.refreshKeys();
    };

    Main.prototype.onKeyLink = function(event) {
      var $a, id;

      $a = $(event.target);
      id = $a.attr("id");
      return this.updateKeyValueDisplay(id.slice(id.indexOf('_') + 1));
    };

    return Main;

  })();

  main = null;

  $(window).on("load", function() {
    return main = new Main;
  });

}).call(this);
